In an object-oriented language such as Java, every class requires
implementations of two special methods, one for determining equality
and one for computing hash codes. Although the specification of these
methods is usually straightforward, they can be hard to code (due to
subclassing, delegation, cyclic references, and other factors) and
often harbor subtle faults. A technique is presented that simplifies
this task. Instead of writing code for the methods, the programmer
gives, as a brief annotation, an abstraction function that defines an
abstract view of an object's representation, and sometimes an
additional observer in the form of an iterator method. Equality and
hash codes are then computed in library code that uses reflection to
read the annotations. Experiments on a variety of programs suggest
that, in comparison to writing the methods by hand, our technique
requires less text from the programmer and results in methods that are
more often correct.
