In the modern-day development, projects use Continuous Integration
Services (CISs) to execute the build for every change in the source
code. To ensure that the project remains correct and deployable, a CIS
performs a clean build each time. In a clean environment, a build
system needs to retrieve the project's dependencies (e.g.,
guava.jar). The retrieval, however, can be costly due to dependency
bloat: despite a project using only a few files from each library, the
existing build systems still eagerly retrieve all the libraries at the
beginning of the build.

This paper presents a novel build system, Molly, which lazily
retrieves parts of libraries (i.e., files) that are needed during the
execution of a build target. For example, the compilation target needs
only public interfaces of classes within the libraries and the test
target needs only implementation of the classes that are being invoked
by the tests. Additionally, Molly generates a transfer script that
retrieves parts of libraries based on prior builds. Molly's design
requires that we ignore the boundaries set by the library developers
and look at the files within the libraries. We implemented Molly for
Java and evaluated it on 17 popular open-source projects. We show that
test targets (on average) depend on only 9.97% of files in
libraries. A variant of Molly speeds up retrieval by
44.28%. Furthermore, the scripts generated by Molly retrieve
dependencies, on average, 93.81% faster than the Maven build system.
